package com.example.webshopcosmetics.controller;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.webshopcosmetics.model.Product;
import com.example.webshopcosmetics.repository.ProductRepository;

@RestController
@RequestMapping("/api/chatbot")
public class ChatbotController {
    @Autowired
    private ProductRepository productRepository;

    @GetMapping("/ask")
    public ResponseEntity<String> getAnswer(@RequestParam String question) {
        String lowerCaseQuestion = question.toLowerCase();

        // 1Ô∏è‚É£ Nh·∫≠n di·ªán l·ªùi ch√†o
        if (lowerCaseQuestion.contains("ch√†o") || lowerCaseQuestion.contains("hello") || lowerCaseQuestion.contains("hi")) {
            return ResponseEntity.ok("Xin ch√†o! B·∫°n c·∫ßn t∆∞ v·∫•n s·∫£n ph·∫©m g√¨ ·∫°? üòä");
        }

        // 2Ô∏è‚É£ Nh·∫≠n di·ªán c√¢u h·ªèi v·ªÅ m√†u s·∫Øc
        if (lowerCaseQuestion.contains("m√†u")) {
            String color = extractColor(lowerCaseQuestion); // T√°ch m√†u t·ª´ c√¢u h·ªèi
            if (color != null) {
                List<Product> products = productRepository.findByDescriptionContainingIgnoreCase(color);
                if (!products.isEmpty()) {
                    return ResponseEntity.ok(formatProductList(products));
                } else {
                    return ResponseEntity.ok("Xin l·ªói, hi·ªán t·∫°i shop ch∆∞a c√≥ s·∫£n ph·∫©m m√†u " + color + " üò¢.");
                }
            }
        }

        // 3Ô∏è‚É£ Nh·∫≠n di·ªán c√¢u h·ªèi v·ªÅ gi√° s·∫£n ph·∫©m
        if (lowerCaseQuestion.contains("gi√°") || lowerCaseQuestion.contains("d∆∞·ªõi")) {
            Integer price = extractPrice(lowerCaseQuestion); // T√°ch gi√° t·ª´ c√¢u h·ªèi
            if (price != null) {
                List<Product> products = productRepository.findByPriceLessThan(price);
                if (!products.isEmpty()) {
                    return ResponseEntity.ok(formatProductList(products));
                } else {
                    return ResponseEntity.ok("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ gi√° d∆∞·ªõi " + price + "ƒë.");
                }
            }
        }

        // 4Ô∏è‚É£ M·∫∑c ƒë·ªãnh: T√¨m s·∫£n ph·∫©m theo t√™n
        List<Product> products = productRepository.findByNameContainingIgnoreCase(question);
        if (!products.isEmpty()) {
            return ResponseEntity.ok(formatProductList(products));
        }

        return ResponseEntity.ok("Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ m√†u s·∫Øc, gi√° ti·ªÅn ho·∫∑c t√™n s·∫£n ph·∫©m nh√©!");
    }

    // H√†m t√°ch m√†u s·∫Øc t·ª´ c√¢u h·ªèi
    private String extractColor(String question) {
        List<String> colors = Arrays.asList("ƒë·ªè", "xanh", "v√†ng", "h·ªìng", "n√¢u", "ƒëen", "tr·∫Øng", "t√≠m");
        for (String color : colors) {
            if (question.contains(color)) {
                return color;
            }
        }
        return null;
    }

    // H√†m t√°ch gi√° t·ª´ c√¢u h·ªèi
    private Integer extractPrice(String question) {
        Pattern pattern = Pattern.compile("(\\d+)[kK]?");
        Matcher matcher = pattern.matcher(question);
        if (matcher.find()) {
            return Integer.parseInt(matcher.group(1)) * 1000;
        }
        return null;
    }

    // H√†m ƒë·ªãnh d·∫°ng danh s√°ch s·∫£n ph·∫©m tr·∫£ v·ªÅ
    private String formatProductList(List<Product> products) {
        StringBuilder response = new StringBuilder("T√¥i t√¨m th·∫•y c√°c s·∫£n ph·∫©m sau:\n");
        for (Product p : products) {
            response.append("- ").append(p.getName())
                    .append(" (Gi√°: ").append(p.getPrice()).append("ƒë)\n");
        }
        return response.toString();
    }
}

